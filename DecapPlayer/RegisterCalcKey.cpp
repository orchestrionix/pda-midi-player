#include <windows.h>
#include "registercalckey.h"
#include "amx.h"

static const unsigned char smallcode[] = {
0xF4, 0x01, 0x00, 0x00, 0xE0, 0xF1, 0x05, 0x04, 0x04, 0x00, 0x18, 0x00, 0xA0, 0x00, 0x00, 0x00,
0x98, 0x04, 0x00, 0x00, 0xB4, 0x04, 0x00, 0x00, 0xB4, 0x44, 0x00, 0x00, 0xC0, 0x02, 0x00, 0x00,
0x02, 0x00, 0x40, 0x00, 0x00, 0x00, 0x02, 0x00, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0xA0, 0x00,
0x00, 0x00, 0x00, 0x00, 0xA0, 0x00, 0x00, 0x00, 0x00, 0x00, 0xA0, 0x00, 0x00, 0x00, 0x00, 0x00,
0x54, 0x00, 0x00, 0x00, 0x61, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x02, 0x00, 0x00, 0x62, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x67, 0x65, 0x74, 0x76, 0x61, 0x6C, 0x75, 0x65, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0x72, 0x69, 0x6E,
0x74, 0x66, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x2E, 0x80, 0x7D, 0x04, 0x00, 0x29, 0x0C, 0x04, 0x0C, 0x0B, 0x05, 0x23, 0x80, 0x43, 0x80, 0x57,
0x82, 0xE6, 0xE3, 0x17, 0x2B, 0x80, 0x53, 0x22, 0x0B, 0x05, 0x80, 0x4A, 0x30, 0x2E, 0x80, 0x7D,
0x0A, 0x00, 0x2C, 0x7C, 0x80, 0x59, 0x11, 0x7C, 0x80, 0x7D, 0x0C, 0x00, 0x03, 0x0C, 0x0C, 0x85,
0x92, 0x85, 0xA8, 0x53, 0x80, 0x53, 0x11, 0x7C, 0x80, 0x7D, 0x0D, 0x00, 0x03, 0x7C, 0x80, 0x58,
0x88, 0x73, 0x0C, 0x82, 0xB5, 0xAE, 0x51, 0x80, 0x53, 0x11, 0x7C, 0x80, 0x7D, 0x0E, 0x00, 0x29,
0x7C, 0x03, 0x7C, 0x0C, 0x0F, 0x80, 0x51, 0x2B, 0x23, 0x80, 0x41, 0x80, 0x57, 0x81, 0x53, 0x80,
0x58, 0x81, 0x59, 0x80, 0x57, 0x83, 0xB5, 0xEE, 0x71, 0x11, 0x7C, 0x80, 0x7D, 0x0F, 0x00, 0x2C,
0x7C, 0x03, 0x7C, 0x0C, 0x07, 0x80, 0x51, 0x11, 0x78, 0x33, 0x82, 0x70, 0x80, 0x7D, 0x0F, 0x00,
0x80, 0x73, 0x78, 0x29, 0x78, 0x80, 0x59, 0x2B, 0x23, 0x3E, 0x83, 0x54, 0x80, 0x7D, 0x10, 0x00,
0x03, 0x7C, 0x0C, 0x9A, 0x65, 0x80, 0x53, 0x80, 0x58, 0x80, 0x64, 0x22, 0x03, 0x10, 0x80, 0x4E,
0x11, 0x7C, 0x33, 0x82, 0x5C, 0x2C, 0x04, 0x80, 0x7D, 0x11, 0x00, 0x29, 0x7C, 0x27, 0x04, 0x31,
0x00, 0x0C, 0xA7, 0xFF, 0xFF, 0x7F, 0x80, 0x51, 0x2C, 0x04, 0x30, 0x2E, 0x80, 0x7D, 0x16, 0x00,
0x03, 0x0C, 0x80, 0x5A, 0x38, 0x84, 0x50, 0x80, 0x7D, 0x17, 0x00, 0x80, 0x59, 0x30, 0x80, 0x7D,
0x18, 0x00, 0x29, 0x14, 0x29, 0x0C, 0x27, 0x08, 0x31, 0x80, 0x54, 0x22, 0x03, 0x10, 0x38, 0x85,
0x28, 0x80, 0x7D, 0x19, 0x00, 0x0B, 0x89, 0x52, 0x30, 0x80, 0x7D, 0x1A, 0x00, 0x0B, 0x0C, 0x30,
0x2E, 0x80, 0x7D, 0x1F, 0x00, 0x2C, 0x7C, 0x80, 0x59, 0x11, 0x7C, 0x80, 0x7D, 0x20, 0x00, 0x2C,
0x7C, 0x80, 0x59, 0x11, 0x78, 0x80, 0x7D, 0x21, 0x00, 0x27, 0x0D, 0x27, 0x0A, 0x27, 0x08, 0x80,
0x7B, 0x00, 0x2C, 0x0C, 0x11, 0x7C, 0x80, 0x7D, 0x22, 0x00, 0x27, 0x0D, 0x27, 0x0A, 0x27, 0x08,
0x80, 0x7B, 0x00, 0x2C, 0x0C, 0x11, 0x78, 0x80, 0x7D, 0x23, 0x00, 0x29, 0x78, 0x29, 0x7C, 0x27,
0x08, 0x31, 0x80, 0x54, 0x2D, 0x04, 0x17, 0x25, 0x81, 0x05, 0x7C, 0x27, 0x00, 0x27, 0x0C, 0x80,
0x7B, 0x01, 0x2C, 0x10, 0x2D, 0x7C, 0x2C, 0x08, 0x80, 0x59, 0x30, 0x25, 0x80, 0x64, 0x2D, 0x25,
0x80, 0x64, 0x2C, 0x00
};

int AMXAPI aux_LoadProgram(AMX *amx, const void *pCode)
{
  AMX_HEADER hdr;
  int result, didalloc;
  void *memblock = NULL;

  /* open the file, read and check the header */
  memcpy(&hdr, pCode, sizeof hdr);
  amx_Align16(&hdr.magic);
  amx_Align32((uint32_t *)&hdr.size);
  amx_Align32((uint32_t *)&hdr.stp);
  if (hdr.magic != AMX_MAGIC) {
    return AMX_ERR_FORMAT;
  } /* if */

  /* allocate the memblock if it is NULL */
  didalloc = 0;
  if (memblock == NULL) {
    if ((memblock = malloc(hdr.stp)) == NULL) {
      return AMX_ERR_MEMORY;
    } /* if */
    didalloc = 1;
    /* after amx_Init(), amx->base points to the memory block */
  } /* if */

  /* read in the file */
  memcpy(memblock, pCode, (size_t)hdr.size);

  /* initialize the abstract machine */
  memset(amx, 0, sizeof *amx);
  result = amx_Init(amx, memblock);

  /* free the memory block on error, if it was allocated here */
  if (result != AMX_ERR_NONE && didalloc) {
    free(memblock);
    amx->base = NULL;                   /* avoid a double free */
  } /* if */

  return result;
}

int AMXAPI aux_FreeProgram(AMX *amx)
{
  if (amx->base!=NULL) {
//    amx_Cleanup(amx);
    free(amx->base);
    memset(amx,0,sizeof(AMX));
  } /* if */
  return AMX_ERR_NONE;
}

bool Regist_CheckPWD(DWORD dwCode0, DWORD dwCode1, DWORD dwSerial)
{
	AMX amx;
	int index;
	cell ret = 0;

	if(aux_LoadProgram(&amx, smallcode) != AMX_ERR_NONE)
		return false;

	amx_FindPublic(&amx, "b", &index);
	amx_Exec(&amx, &ret, index, 3, dwCode0, dwCode1, dwSerial);
	aux_FreeProgram(&amx);

	return ret > 100;
}
